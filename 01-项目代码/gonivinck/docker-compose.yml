version: '3.5'
# 网络配置
networks:
  backend:
    driver: ${NETWORKS_DRIVER}

# 服务容器配置
services:
  golang:                                # 自定义容器名称
    build:
      context: ./golang                  # 指定构建使用的 Dockerfile 文件
    environment:                         # 设置环境变量
      - TZ=${TZ}
    privileged: true
    volumes:                             # 设置挂载目录
      - ${CODE_PATH_HOST}:/usr/src/code  # 引用 .env 配置中 CODE_PATH_HOST 变量，将宿主机上代码存放的目录挂载到容器中 /usr/src/code 目录
#    ports: # 设置端口映射
#      - "8000:8000"
#      - "8001:8001"
#      - "8002:8002"
#      - "8003:8003"
#      - "9000:9000"
#      - "9001:9001"
#      - "9002:9002"
#      - "9003:9003"
    stdin_open: true                     # 打开标准输入，可以接受外部输入
    tty: true
    networks:
      - backend
    restart: always                      # 指定容器退出后的重启策略为始终重启

  etcd:                                  # 自定义容器名称
    build:
      context: ./etcd                    # 指定构建使用的 Dockerfile 文件
    environment:
      - TZ=${TZ}
      - ALLOW_NONE_AUTHENTICATION=yes
      - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
    ports:                               # 设置端口映射
      - "${ETCD_PORT}:2379"
    networks:
      - backend
    restart: always

  mysql:
    build:
      context: ./mysql
    environment:
      - TZ=${TZ}
      - MYSQL_USER=${MYSQL_USERNAME}                  # 设置 Mysql 用户名称
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}              # 设置 Mysql 用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}    # 设置 Mysql root 用户密码
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql        # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Mysql 数据的目录挂载到容器中 /var/lib/mysql 目录
    ports:
      - "${MYSQL_PORT}:3306"                          # 设置容器3306端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  redis:
    build:
      context: ./redis
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ${DATA_PATH_HOST}/redis:/data                 # 引用 .env 配置中 DATA_PATH_HOST 变量，将宿主机上存放 Redis 数据的目录挂载到容器中 /data 目录
    ports:
      - "${REDIS_PORT}:6379"                          # 设置容器6379端口映射指定宿主机端口
    networks:
      - backend
    restart: always

  mysql-manage:
    build:
      context: ./mysql-manage
    environment:
      - TZ=${TZ}
      - PMA_ARBITRARY=1
      - MYSQL_USER=${MYSQL_MANAGE_USERNAME}               # 设置连接的 Mysql 服务用户名称
      - MYSQL_PASSWORD=${MYSQL_MANAGE_PASSWORD}           # 设置连接的 Mysql 服务用户密码
      - MYSQL_ROOT_PASSWORD=${MYSQL_MANAGE_ROOT_PASSWORD} # 设置连接的 Mysql 服务 root 用户密码
      - PMA_HOST=${MYSQL_MANAGE_CONNECT_HOST}             # 设置连接的 Mysql 服务 host，可以是 Mysql 服务容器的名称，也可以是 Mysql 服务容器的 ip 地址
      - PMA_PORT=${MYSQL_MANAGE_CONNECT_PORT}             # 设置连接的 Mysql 服务端口号
    ports:
      - "${MYSQL_MANAGE_PORT}:80"                         # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                           # 依赖容器
      - mysql                                             # 在 Mysql 服务容器启动后启动
    networks:
      - backend
    restart: always

  redis-manage:
    build:
      context: ./redis-manage
    environment:
      - TZ=${TZ}
      - ADMIN_USER=${REDIS_MANAGE_USERNAME}           # 设置 Redis 可视化管理的用户名称
      - ADMIN_PASS=${REDIS_MANAGE_PASSWORD}           # 设置 Redis 可视化管理的用户密码
      - REDIS_1_HOST=${REDIS_MANAGE_CONNECT_HOST}     # 设置连接的 Redis 服务 host，可以是 Redis 服务容器的名称，也可以是 Redis 服务容器的 ip 地址
      - REDIS_1_PORT=${REDIS_MANAGE_CONNECT_PORT}     # 设置连接的 Redis 服务端口号
    ports:
      - "${REDIS_MANAGE_PORT}:80"                     # 设置容器80端口映射指定宿主机端口，用于宿主机访问可视化web
    depends_on:                                       # 依赖容器
      - redis                                         # 在 Redis 服务容器启动后启动
    networks:
      - backend
    restart: always


  prometheus:
    build:
      context: ./prometheus
    environment:
      - TZ=${TZ}
    privileged: true
    volumes:
      - ./prometheus/prometheus.yml:/opt/bitnami/prometheus/conf/prometheus.yml  # 将 prometheus 配置文件挂载到容器里
    ports:
      - "${PROMETHEUS_PORT}:9090"                     # 设置容器9090端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  grafana:
    build:
      context: ./grafana
    environment:
      - TZ=${TZ}
    ports:
      - "${GRAFANA_PORT}:3000"                        # 设置容器3000端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  file-rpc:
      container_name: dockerdev-file-rpc
      build:
        context: ./code/becs
        dockerfile: service/fileSystem/rpc/Dockerfile
      environment:
          - TZ=${TZ}
      ports:
          - "${FILE_RPC_PORT}:9001"
      networks:
          - backend
      restart: always
      security_opt:
        - "seccomp:unconfined"
      cap_add:
        - SYS_PTRACE
  file-api:
      container_name: dockerdev-file-api
      build:
        context: ./code/becs
        dockerfile: service/fileSystem/api/code/ucenterapi/Dockerfile
      environment:
          - TZ=${TZ}
      ports:
          - "${FILE_API_PORT}:8001"
      networks:
          - backend
      restart: always
      security_opt:
        - "seccomp:unconfined"
      cap_add:
        - SYS_PTRACE


  contract-rpc:
    container_name: dockerdev-contract-rpc
    build:
      context: ./code/becs
      dockerfile: service/contract/rpc/Dockerfile
    environment:
      - TZ=${TZ}
    ports:
      - "${CONTRACT_RPC_PORT}:9002"
    networks:
      - backend
    restart: always
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
  contract-api:
    container_name: dockerdev-contract-api
    build:
      context: ./code/becs
      dockerfile: service/contract/api/Dockerfile
    environment:
      - TZ=${TZ}
    ports:
      - "${CONTRACT_API_PORT}:8002"
    networks:
      - backend
    restart: always
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE


  seal-rpc:
    container_name: dockerdev-seal-rpc
    build:
      context: ./code/becs
      dockerfile: service/seal/rpc/Dockerfile
    environment:
      - TZ=${TZ}
    ports:
      - "${SEAL_RPC_PORT}:9003"
    networks:
      - backend
    restart: always
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
  seal-api:
    container_name: dockerdev-seal-api
    build:
      context: ./code/becs
      dockerfile: service/seal/api/Dockerfile
    environment:
      - TZ=${TZ}
    ports:
      - "${SEAL_API_PORT}:8003"
    networks:
      - backend
    restart: always
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE


  user-rpc:
    container_name: dockerdev-user-rpc
    build:
      context: ./code/becs
      dockerfile: service/user/rpc/Dockerfile
    environment:
        - TZ=${TZ}
    ports:
        - "${USER_RPC_PORT}:9000"
        - "2345:2345"
    networks:
        - backend
    restart: always
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE
#
  user-api:
    container_name: dockerdev-user-api
    build:
      context: ./code/becs
      dockerfile: service/user/api/Dockerfile
    environment:
      - TZ=${TZ}
    ports:
      - "8000:8000"
      - "2346:2346"
    networks:
      - backend
    restart: always
    security_opt:
      - "seccomp:unconfined"
    cap_add:
      - SYS_PTRACE

  react-app:
    build:
      context: ./code/becs-fontend/becs
      dockerfile: Dockerfile
    volumes:
      - ./code/becs-fontend/becs/build:/usr/share/nginx/html  # 将构建的文件挂载到 Nginx 的默认静态文件目录

  jaeger:
    build:
      context: ./jaeger
    environment:
      - TZ=${TZ}
    ports:
      - "${JAEGER_PORT}:16686"                        # 设置容器16686端口映射指定宿主机端口，用于宿主机访问可视化web
    networks:
      - backend
    restart: always

  dtm:
    build:
      context: ./dtm
    environment:
      - TZ=${TZ}
    entrypoint:
      - "/app/dtm/dtm"
      - "-c=/app/dtm/configs/config.yaml"
    privileged: true
    volumes:
      - ./dtm/config.yml:/app/dtm/configs/config.yaml # 将 dtm 配置文件挂载到容器里
    ports:
      - "${DTM_HTTP_PORT}:36789"
      - "${DTM_GRPC_PORT}:36790"
    networks:
      - backend
    restart: always

  nginx-gateway:
    image: nginx:1.21.5
    container_name: nginx-gateway
    restart: always
    privileged: true
    environment:
      - TZ=Asia/Shanghai
    ports:
      - 8888:80
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./data/nginx/log:/var/log/nginx
      - ./code/becs-fontend/becs/build:/usr/share/nginx/html
    networks:
      - backend
    depends_on:
      - react-app

  ganache:
    build: ./ganache
    ports:
      - "7545:7545"
    networks:
      - backend
  ipfs:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001"   # Swarm port
      - "5001:5001"   # API port
      - "8080:8080"   # Gateway port
    volumes:
      - ipfs-data:/data/ipfs
    networks:
      - backend

volumes:
  ipfs-data:


